@page "/panel"

@using NodeEleven.Models.SteamModel;
@using NodeEleven.Models.DbModel;
@using System.Net.Http;
@using DataLibrary

@inject IHttpClientFactory _clientFactory
@inject IDataAccess _data
@inject IConfiguration _config


<PageTitle>Panel</PageTitle>

    @*

    @if(news == null)
    {
    <p class="panel-txt">Loading panel...</p>
    }
    else
    {
        <p class="panel-txt">@news.newsitems[0].appid</p>
    }

    *@

<h3>Panel</h3>

@if (string.IsNullOrWhiteSpace(errorString) == false)
{
    <div class="panel-txt">@errorString</div>
}
else if (steam is null)
{
    <p class="panel-txt">Loading panel...</p>
}
else
{
    <p class="panel-txt"> @steam.appnews.appid </p>
}

@if (games == null)
{
    <p class="panel-txt">Loading panel...</p>
}
else
{
    @foreach (var g in games)
    {
        <p class="panel-txt">
            @g.name
        </p>
    }
}



@code {

    SteamModel steam;
    string errorString;

    List<DbModel> games;



    protected override async Task OnInitializedAsync()
    {
        string sql = "select * from games";

        games = await _data.LoadData<DbModel, dynamic>(sql, new { }, _config.GetConnectionString("default"));

        var client = _clientFactory.CreateClient("steam");

        try
        {
            steam = await client.GetFromJsonAsync<SteamModel>("ISteamNews/GetNewsForApp/v0002/?appid=440&count=3&maxlength=300&format=json");
            errorString = null;
        }
        catch (Exception ex)
        {
            errorString = $"There was an error getting data from steam: {ex.Message }";
        }
    }
}
